/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package fooSb.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import fooSb.model.Projet;
import fooSb.model.ProjetModel;
import fooSb.model.ProjetSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Projet service. Represents a row in the &quot;FOO_Projet&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ProjetModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProjetImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProjetImpl
 * @see Projet
 * @see ProjetModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ProjetModelImpl extends BaseModelImpl<Projet>
	implements ProjetModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a projet model instance should use the {@link Projet} interface instead.
	 */
	public static final String TABLE_NAME = "FOO_Projet";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "projetId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "town", Types.VARCHAR },
			{ "isSingle", Types.BOOLEAN },
			{ "age", Types.INTEGER },
			{ "birthDay", Types.TIMESTAMP },
			{ "firstandLastName", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("projetId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("town", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isSingle", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("age", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("birthDay", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("firstandLastName", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table FOO_Projet (uuid_ VARCHAR(75) null,projetId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,town VARCHAR(75) null,isSingle BOOLEAN,age INTEGER,birthDay DATE null,firstandLastName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table FOO_Projet";
	public static final String ORDER_BY_JPQL = " ORDER BY projet.firstandLastName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY FOO_Projet.firstandLastName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(fooSb.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.fooSb.model.Projet"), true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(fooSb.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.fooSb.model.Projet"), true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(fooSb.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.fooSb.model.Projet"), true);
	public static final long AGE_COLUMN_BITMASK = 1L;
	public static final long COMPANYID_COLUMN_BITMASK = 2L;
	public static final long FIRSTANDLASTNAME_COLUMN_BITMASK = 4L;
	public static final long GROUPID_COLUMN_BITMASK = 8L;
	public static final long TOWN_COLUMN_BITMASK = 16L;
	public static final long UUID_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Projet toModel(ProjetSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Projet model = new ProjetImpl();

		model.setUuid(soapModel.getUuid());
		model.setProjetId(soapModel.getProjetId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setTown(soapModel.getTown());
		model.setIsSingle(soapModel.getIsSingle());
		model.setAge(soapModel.getAge());
		model.setBirthDay(soapModel.getBirthDay());
		model.setFirstandLastName(soapModel.getFirstandLastName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Projet> toModels(ProjetSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Projet> models = new ArrayList<Projet>(soapModels.length);

		for (ProjetSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(fooSb.service.util.ServiceProps.get(
				"lock.expiration.time.fooSb.model.Projet"));

	public ProjetModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _projetId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProjetId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _projetId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Projet.class;
	}

	@Override
	public String getModelClassName() {
		return Projet.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("projetId", getProjetId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("town", getTown());
		attributes.put("isSingle", getIsSingle());
		attributes.put("age", getAge());
		attributes.put("birthDay", getBirthDay());
		attributes.put("firstandLastName", getFirstandLastName());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long projetId = (Long)attributes.get("projetId");

		if (projetId != null) {
			setProjetId(projetId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String town = (String)attributes.get("town");

		if (town != null) {
			setTown(town);
		}

		Boolean isSingle = (Boolean)attributes.get("isSingle");

		if (isSingle != null) {
			setIsSingle(isSingle);
		}

		Integer age = (Integer)attributes.get("age");

		if (age != null) {
			setAge(age);
		}

		Date birthDay = (Date)attributes.get("birthDay");

		if (birthDay != null) {
			setBirthDay(birthDay);
		}

		String firstandLastName = (String)attributes.get("firstandLastName");

		if (firstandLastName != null) {
			setFirstandLastName(firstandLastName);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getProjetId() {
		return _projetId;
	}

	@Override
	public void setProjetId(long projetId) {
		_projetId = projetId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getTown() {
		if (_town == null) {
			return StringPool.BLANK;
		}
		else {
			return _town;
		}
	}

	@Override
	public void setTown(String town) {
		_columnBitmask |= TOWN_COLUMN_BITMASK;

		if (_originalTown == null) {
			_originalTown = _town;
		}

		_town = town;
	}

	public String getOriginalTown() {
		return GetterUtil.getString(_originalTown);
	}

	@JSON
	@Override
	public boolean getIsSingle() {
		return _isSingle;
	}

	@JSON
	@Override
	public boolean isIsSingle() {
		return _isSingle;
	}

	@Override
	public void setIsSingle(boolean isSingle) {
		_isSingle = isSingle;
	}

	@JSON
	@Override
	public int getAge() {
		return _age;
	}

	@Override
	public void setAge(int age) {
		_columnBitmask |= AGE_COLUMN_BITMASK;

		if (!_setOriginalAge) {
			_setOriginalAge = true;

			_originalAge = _age;
		}

		_age = age;
	}

	public int getOriginalAge() {
		return _originalAge;
	}

	@JSON
	@Override
	public Date getBirthDay() {
		return _birthDay;
	}

	@Override
	public void setBirthDay(Date birthDay) {
		_birthDay = birthDay;
	}

	@JSON
	@Override
	public String getFirstandLastName() {
		if (_firstandLastName == null) {
			return StringPool.BLANK;
		}
		else {
			return _firstandLastName;
		}
	}

	@Override
	public void setFirstandLastName(String firstandLastName) {
		_columnBitmask = -1L;

		if (_originalFirstandLastName == null) {
			_originalFirstandLastName = _firstandLastName;
		}

		_firstandLastName = firstandLastName;
	}

	public String getOriginalFirstandLastName() {
		return GetterUtil.getString(_originalFirstandLastName);
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				Projet.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Projet.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Projet toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Projet)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProjetImpl projetImpl = new ProjetImpl();

		projetImpl.setUuid(getUuid());
		projetImpl.setProjetId(getProjetId());
		projetImpl.setGroupId(getGroupId());
		projetImpl.setCompanyId(getCompanyId());
		projetImpl.setUserId(getUserId());
		projetImpl.setUserName(getUserName());
		projetImpl.setCreateDate(getCreateDate());
		projetImpl.setModifiedDate(getModifiedDate());
		projetImpl.setTown(getTown());
		projetImpl.setIsSingle(getIsSingle());
		projetImpl.setAge(getAge());
		projetImpl.setBirthDay(getBirthDay());
		projetImpl.setFirstandLastName(getFirstandLastName());

		projetImpl.resetOriginalValues();

		return projetImpl;
	}

	@Override
	public int compareTo(Projet projet) {
		int value = 0;

		value = getFirstandLastName().compareTo(projet.getFirstandLastName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Projet)) {
			return false;
		}

		Projet projet = (Projet)obj;

		long primaryKey = projet.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ProjetModelImpl projetModelImpl = this;

		projetModelImpl._originalUuid = projetModelImpl._uuid;

		projetModelImpl._originalGroupId = projetModelImpl._groupId;

		projetModelImpl._setOriginalGroupId = false;

		projetModelImpl._originalCompanyId = projetModelImpl._companyId;

		projetModelImpl._setOriginalCompanyId = false;

		projetModelImpl._setModifiedDate = false;

		projetModelImpl._originalTown = projetModelImpl._town;

		projetModelImpl._originalAge = projetModelImpl._age;

		projetModelImpl._setOriginalAge = false;

		projetModelImpl._originalFirstandLastName = projetModelImpl._firstandLastName;

		projetModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Projet> toCacheModel() {
		ProjetCacheModel projetCacheModel = new ProjetCacheModel();

		projetCacheModel.uuid = getUuid();

		String uuid = projetCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			projetCacheModel.uuid = null;
		}

		projetCacheModel.projetId = getProjetId();

		projetCacheModel.groupId = getGroupId();

		projetCacheModel.companyId = getCompanyId();

		projetCacheModel.userId = getUserId();

		projetCacheModel.userName = getUserName();

		String userName = projetCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			projetCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			projetCacheModel.createDate = createDate.getTime();
		}
		else {
			projetCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			projetCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			projetCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		projetCacheModel.town = getTown();

		String town = projetCacheModel.town;

		if ((town != null) && (town.length() == 0)) {
			projetCacheModel.town = null;
		}

		projetCacheModel.isSingle = getIsSingle();

		projetCacheModel.age = getAge();

		Date birthDay = getBirthDay();

		if (birthDay != null) {
			projetCacheModel.birthDay = birthDay.getTime();
		}
		else {
			projetCacheModel.birthDay = Long.MIN_VALUE;
		}

		projetCacheModel.firstandLastName = getFirstandLastName();

		String firstandLastName = projetCacheModel.firstandLastName;

		if ((firstandLastName != null) && (firstandLastName.length() == 0)) {
			projetCacheModel.firstandLastName = null;
		}

		return projetCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", projetId=");
		sb.append(getProjetId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", town=");
		sb.append(getTown());
		sb.append(", isSingle=");
		sb.append(getIsSingle());
		sb.append(", age=");
		sb.append(getAge());
		sb.append(", birthDay=");
		sb.append(getBirthDay());
		sb.append(", firstandLastName=");
		sb.append(getFirstandLastName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("fooSb.model.Projet");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projetId</column-name><column-value><![CDATA[");
		sb.append(getProjetId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>town</column-name><column-value><![CDATA[");
		sb.append(getTown());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isSingle</column-name><column-value><![CDATA[");
		sb.append(getIsSingle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>age</column-name><column-value><![CDATA[");
		sb.append(getAge());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>birthDay</column-name><column-value><![CDATA[");
		sb.append(getBirthDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>firstandLastName</column-name><column-value><![CDATA[");
		sb.append(getFirstandLastName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Projet.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Projet.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _projetId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _town;
	private String _originalTown;
	private boolean _isSingle;
	private int _age;
	private int _originalAge;
	private boolean _setOriginalAge;
	private Date _birthDay;
	private String _firstandLastName;
	private String _originalFirstandLastName;
	private long _columnBitmask;
	private Projet _escapedModel;
}